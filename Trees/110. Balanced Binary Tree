
//dfs bottom up 
class Solution {
     public boolean isBalanced(TreeNode root) {
        return dfsHeight(root) != -1;
    }
    
    private int dfsHeight(TreeNode root) {
        if (root == null)
            return 0;
        
        int leftHeight = dfsHeight(root.left);
        if (leftHeight == -1)                       
            return -1;
        
        int rightHeight = dfsHeight(root.right);
        if (rightHeight == -1)                      
            return -1;
        
        if (Math.abs(leftHeight - rightHeight) > 1) 
            return -1;
        
        return Math.max(leftHeight, rightHeight) + 1;
    }
}

//DFS finsing height at every iteration
class solution {
public:
    int depth (TreeNode *root) {
        if (root == NULL) return 0;
        return max (depth(root -> left), depth (root -> right)) + 1;
    }

    bool isBalanced (TreeNode *root) {
        if (root == NULL) return true;
        
        int left=depth(root->left);
        int right=depth(root->right);
        
        return abs(left - right) <= 1 && isBalanced(root->left) && isBalanced(root->right);
    }
};
