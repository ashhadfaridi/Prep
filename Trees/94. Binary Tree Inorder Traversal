//(Left, root, right)
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        
        Deque<TreeNode> stack = new ArrayDeque<>();
        
        TreeNode p = root;
        
        while(!stack.isEmpty() ||  p!=null){
            
            if(p!=null){
                stack.push(p);
                p = p.left;
            }else{
                  TreeNode node= stack.pop();
                    res.add(node.val);
                    p = node.right ; 
                  }
        }
        return res; 
    }
}

//recursive

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        
        List<Integer> res = new ArrayList<>();
        
        process(root , res);
        return res;
    }
    public void process(TreeNode root , List<Integer> res){
        
        if(root !=null){
            if(root.left !=null){
                process(root.left , res);
            }
            res.add(root.val);
            if(root.right !=null){
                process(root.right , res);
            }
        }
    }
}
