//Using String builder to optimize

class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        List<String> list = new ArrayList<>();
        helper(root , sb , list);
        return list ; 
    }
    
    void helper(TreeNode root , StringBuilder sb , List<String> list){
        
        if(root ==null) return ;
         int len = sb.length();

        
        sb.append(root.val);
        if(root.left==null &&root.right==null) list.add(sb.toString());
        
        else {sb.append("->");
        helper(root.left , sb , list);
        helper(root.right , sb , list);
    }
        sb.setLength(len);
        
    }
    
    //using string 
    
    class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> res = new ArrayList<>();
        helper(res , "" , root);
        return res ; 
    }
    
    public static void helper(List<String> res , String s , TreeNode root){
        
        if(root == null ) return ;
        
        if(root.left ==null && root.right==null) res.add( s+root.val);
        if(root.left != null) helper(res , s+root.val + "->", root.left);
        if(root.right != null) helper(res , s+root.val+"->" , root.right);
    }
}
