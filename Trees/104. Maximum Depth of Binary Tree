Recursive DFS
class Solution {
    public int maxDepth(TreeNode root) {
        
        if(root == null) return 0  ;
        
        return 1 + Math.max(maxDepth(root.left) , maxDepth(root.right));
    }
}



Iterative DFS
class Solution {
    
    public int maxDepth(TreeNode root) {
        
        if(root==null) {
            return 0;
        }
        
        Stack<Pair<TreeNode, Integer>> stack = new Stack<>();
        stack.push(new Pair(root, 1));
        
        int maxDepth = 0;
        while(!stack.isEmpty()) {

            Pair<TreeNode, Integer> pair = stack.pop();
            TreeNode node = pair.key;
            int currDepth = pair.value;
            
            maxDepth = Math.max(maxDepth, currDepth);
            
            if(node.left!=null) {
                stack.push(new Pair(node.left, currDepth+1));
            }
            
            if(node.right!=null) {
                stack.push(new Pair(node.right, currDepth+1));
            }  
        }
        
        return maxDepth;
    }
}

BFS
class Solution {
    public int maxDepth(TreeNode root) {
         
        if(root == null) return 0; 
        Queue<TreeNode> q = new LinkedList<>();
        int level = 0 ;
        q.offer(root);
        while(!q.isEmpty()){
            int depth = q.size();
            for(int i = 0 ; i <depth ; i++){
               if(q.peek().left != null) q.offer(q.peek().left);
                if(q.peek().right != null) q.offer(q.peek().right);
                q.poll();
            }
            
            level++;
        }
        return level ; 
    }
}

