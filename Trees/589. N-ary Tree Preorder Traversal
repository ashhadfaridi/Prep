//do normal preorder on root then for each child node in list call preorder

class Solution {
    List<Integer> list = new ArrayList<>();
    public List<Integer> preorder(Node root) {
        if(root ==null) return new ArrayList<>();
        helper(root);
        return list ;
    }
    public void helper( Node root){
        if(root.children == null) return ;
        list.add(root.val);
        
        for(Node child: root.children){
            helper(child);
        }
    }
}
//iterative way push root in stack and then children from right to left since FILO so list adds from left to right

class Solution {
    public List<Integer> preorder(Node root) {
        Stack<Node> s = new Stack<>();
        List<Integer> list = new ArrayList<>();
        
        if(root == null) return list ; 
        s.push(root);
        
        while(!s.isEmpty()){
            root = s.pop();
            list.add(root.val);
            for(int i = root.children.size()-1 ; i>=0 ; i--){
                s.push(root.children.get(i));
            }
        }
        return list ;
    }
}
