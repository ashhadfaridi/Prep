class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new LinkedList<List<Integer>>();
        Queue<TreeNode> q = new LinkedList<>();
        
        if(root == null) return list ; 
        q.offer(root);
        
        while(!q.isEmpty()){
            int level = q.size();
            List<Integer> subList = new LinkedList<Integer>();
            for(int i = 0 ; i<level ; i++){
                if(q.peek().left !=null) q.offer(q.peek().left);
                if(q.peek().right != null) q.offer(q.peek().right);
                subList.add(q.poll().val);
            }
            list.add(subList);
        }
        return list ; 
    }
}


//using resursion (DFS to implement BSF)
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        process(list , root , 0);
        return list ;
    }
    void process(List<List<Integer>> list , TreeNode root ,int level){
        
        if(root == null) return ;
        
        if(list.size()==level) list.add(new ArrayList<Integer>());
        
        list.get(level).add(root.val);
        
        process(list , root.left , level+1);
        process(list, root.right , level+1);
        
    }
}
