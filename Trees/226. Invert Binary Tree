
//BFS using queue
class Solution {
    public TreeNode invertTree(TreeNode root) {
        
        if(root==null) return null ; 
        
        Queue<TreeNode> q = new LinkedList<>();
        
        q.offer(root);
        
        while(!q.isEmpty()){
            
            TreeNode node = q.poll();
            TreeNode left = node.left ; 
            node.left = node.right ; 
            node.right = left ; 
            
            if(node.left != null) q.offer(node.left);
            if(node.right != null) q.offer(node.right);
        }
        return root ; 
    }
}

//DFS Iterative using stack from deque interface

class Solution {
    public TreeNode invertTree(TreeNode root) {
        
        if(root == null) return null ; 
        
        Deque<TreeNode> s = new LinkedList<>();
        
        s.push(root);
        
        while(!s.isEmpty()){
            
            TreeNode node = s.pop();
            TreeNode left = node.left ; 
            node.left = node.right; 
            node.right = left ;
            
            if(node.left != null) s.push(node.left);
            if(node.right !=null) s.push(node.right);
        }
        return root ; 
    }
}
