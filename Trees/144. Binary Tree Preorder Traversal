/** (Root , left , right)
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> res = new ArrayList<>();
        Deque<TreeNode> stack = new ArrayDeque<>();
        TreeNode p =root ;
        
        while(!stack.isEmpty() || p!=null){
            if(p!= null){
                stack.push(p);
                res.add(p.val);
                p=p.left;
            }else{
                TreeNode node = stack.pop();
                p = node.right;
            }
            
        }
        return res ;
        
    }
}

//recursive 
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        process(root ,list);
        return list;
    }
    
    public void process(TreeNode root , List<Integer> list){
        
        if(root !=null){
            list.add(root.val);
            process(root.left , list);
            process(root.right , list);
        }
    }
}
